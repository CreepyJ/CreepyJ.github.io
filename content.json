{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/02/hello-world/"},{"title":"Spring boot学习day2","text":"配置文件4、@PropertySource&amp;@ImportResource&amp;@Bean@PropertySource功能与ConfigurationProperties搭配进行配置文件的指定。 语法形如 12345678910111213141516171819@PropertySource(value = {\"classpath:person.properties\"})``` #### tips运行发现程序依然首先读取*application.properties*中的值 将*application.properties*中的值注释掉便开始读取*person.properties*中的数据### @ImportResource#### 功能导入Spring的配置文件，让配置文件中内容生效 由于Spring Boot当中没有Spring的配置文件，所以自行编写的配置文件无法识别#### 例如自行编写Spring配置文件beans.xml```xml&lt;?xml version=\"1.0\" encoding=\"UTF‐8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema‐instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring‐beans.xsd\"&gt; &lt;bean id=\"helloService\" class=\"com.atguigu.springboot.service.HelloService\"&gt;&lt;/bean&gt; &lt;/beans&gt; 其中配置了一个bean但无法生效，需要@ImportResource(locations = {&quot;classpath:beans.xml&quot;})导入Spring的配置文件让bean生效 配置类@Configuration和@BeanSpringBoot推荐使用全注解的方式给容器添加组件@Configuration用来指明当前类是配置类，用来替代Spring配置文件xml。在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件。 12345678@Configuration public class MyAppConfig { //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名 @Bean public HelloService helloService02(){ System.out.println(\"配置类@Bean给容器中添加组件了...\"); return new HelloService(); } } 5、配置文件占位符1、在配置文件中加随机数1${random.value}、${random.int}、${random.long} ${random.int(10)}、${random.int[1024,65536]} 2、占位符获取之前配置的值12345678910person.last‐name=张三${random.uuid} person.age=${random.int} person.birth=2017/12/15 person.boss=false person.maps.k1=v1 person.maps.k2=14 person.lists=a,b,c person.dog.name=${person.hello:hello}_dog #由于person.hello不存在，所以变成冒号后面俄字符串\"hello\"person.dog.age=15 12//Person输出值Person{lastName='张三cb6cf73e-8186-48c4-a6a1-4e8a8d67c19b', age=-1069216489, boss=false, birth=Fri Dec 15 00:00:00 CST 2017, maps={k1=v1, k2=14}, lists=[a, b, c], dog=Dog{name='hello_dog', age=15}} 6、Profile1、多Proﬁle文件我们在主配置文件编写的时候，文件名可以是 application-{proﬁle}.properties/yml默认使用application.properties的配置。例如：可以在application.properties中写入spring.profiles.active=dev即自动扫描application-dev.properties中的配置 2、yml支持多文档块模式若使用yml格式，可以使用—进行分割文档块。如： 123456789101112131415server: port: 8081 spring: profiles: active: prod ‐‐-server: port: 8083 spring: profiles: dev ‐‐- server: port: 8084 spring: profiles: prod #指定属于哪个环境 代码将yml分为3个文档块，代表3个环境，并将环境设置为prod 3、激活指定profile1、在配置文件中指定 spring.proﬁles.active=dev2、命令行中直接约定 java -jar spring-boot-02-conﬁg-0.0.1-SNAPSHOT.jar –spring.proﬁles.active=dev；3、虚拟机参数-Dspring.proﬁles.active=dev 7、配置文件加载位置 springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件–ﬁle:./conﬁg/(根目录下的config文件夹)–ﬁle:./ (根目录下)–classpath:/conﬁg/(resource中config文件夹)–classpath:/(resource下)优先级由高到底，高优先级的配置会覆盖低优先级的配置(互补)； 我们还可以通过spring.conﬁg.location来改变默认的配置文件位置项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置java -jar spring-boot-02-conﬁg-02-0.0.1-SNAPSHOT.jar –spring.conﬁg.location=G:/application.properties（无法互补） java -jar spring-boot-02-conﬁg-02-0.0.1-SNAPSHOT.jar –spring.conﬁg.additional-location=G:/application.properties(可以互补) 8、外部配置加载顺序SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会 形成互补配置1、命令行参数2、2.来自java:comp/env的JNDI属性3、Java系统属性（System.getProperties()）4、操作系统环境变量5、RandomValuePropertySource配置的random.*属性值 由jar包外向jar包内寻找：优先加载带proﬁle，再来加载不带proﬁle 9、自动配置1、自动配置原理 1）、SpringBoot启动会加载大量的自动配置类 2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类； 3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了） 4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这 些属性的值； xxxxAutoConfiguration:自动配置类 给容器添加组件xxxxProperties:封装配置文件相关属性 2、细节1、@Conditional注解必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；如@ConditionalOnJava是判断Java版本是否符合要求 2、我们可以通过在配置文件中启用 debug=true属性；来让控制台打印自动配置报告","link":"/2020/05/03/Spring-boot%E5%AD%A6%E4%B9%A0day2/"}],"tags":[{"name":"配置文件","slug":"配置文件","link":"/tags/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"Properties","slug":"Properties","link":"/tags/Properties/"},{"name":"spring boot","slug":"spring-boot","link":"/tags/spring-boot/"}],"categories":[{"name":"spring boot","slug":"spring-boot","link":"/categories/spring-boot/"}]}